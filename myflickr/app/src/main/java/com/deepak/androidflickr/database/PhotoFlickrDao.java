package com.deepak.androidflickr.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.deepak.androidflickr.database.PhotoFlickr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_FLICKR".
*/
public class PhotoFlickrDao extends AbstractDao<PhotoFlickr, String> {

    public static final String TABLENAME = "PHOTO_FLICKR";

    /**
     * Properties of entity PhotoFlickr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Page = new Property(1, Integer.class, "page", false, "PAGE");
        public final static Property Owner = new Property(2, String.class, "owner", false, "OWNER");
        public final static Property Secret = new Property(3, String.class, "secret", false, "SECRET");
        public final static Property Server = new Property(4, String.class, "server", false, "SERVER");
        public final static Property Farm = new Property(5, String.class, "farm", false, "FARM");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Ispublic = new Property(7, Integer.class, "ispublic", false, "ISPUBLIC");
        public final static Property Isfriend = new Property(8, Integer.class, "isfriend", false, "ISFRIEND");
        public final static Property Isfamily = new Property(9, Integer.class, "isfamily", false, "ISFAMILY");
        public final static Property ImageData = new Property(10, byte[].class, "imageData", false, "IMAGE_DATA");
        public final static Property Url = new Property(11, String.class, "url", false, "URL");
    };


    public PhotoFlickrDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoFlickrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_FLICKR\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PAGE\" INTEGER," + // 1: page
                "\"OWNER\" TEXT," + // 2: owner
                "\"SECRET\" TEXT," + // 3: secret
                "\"SERVER\" TEXT," + // 4: server
                "\"FARM\" TEXT," + // 5: farm
                "\"TITLE\" TEXT," + // 6: title
                "\"ISPUBLIC\" INTEGER," + // 7: ispublic
                "\"ISFRIEND\" INTEGER," + // 8: isfriend
                "\"ISFAMILY\" INTEGER," + // 9: isfamily
                "\"IMAGE_DATA\" BLOB," + // 10: imageData
                "\"URL\" TEXT);"); // 11: url
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PHOTO_FLICKR_PAGE ON PHOTO_FLICKR" +
                " (\"PAGE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_FLICKR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhotoFlickr entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(2, page);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(3, owner);
        }
 
        String secret = entity.getSecret();
        if (secret != null) {
            stmt.bindString(4, secret);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(5, server);
        }
 
        String farm = entity.getFarm();
        if (farm != null) {
            stmt.bindString(6, farm);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        Integer ispublic = entity.getIspublic();
        if (ispublic != null) {
            stmt.bindLong(8, ispublic);
        }
 
        Integer isfriend = entity.getIsfriend();
        if (isfriend != null) {
            stmt.bindLong(9, isfriend);
        }
 
        Integer isfamily = entity.getIsfamily();
        if (isfamily != null) {
            stmt.bindLong(10, isfamily);
        }
 
        byte[] imageData = entity.getImageData();
        if (imageData != null) {
            stmt.bindBlob(11, imageData);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(12, url);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhotoFlickr readEntity(Cursor cursor, int offset) {
        PhotoFlickr entity = new PhotoFlickr( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // page
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // owner
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // secret
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // server
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // farm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ispublic
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isfriend
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isfamily
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // imageData
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhotoFlickr entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPage(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOwner(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSecret(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setServer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFarm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIspublic(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsfriend(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsfamily(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setImageData(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(PhotoFlickr entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(PhotoFlickr entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
